var Player = require('./Player.js');
var Game = require('./Game.js');

function Server(maxGames) {
  this.games = Object.create(null);
  this.playerQue = Object.create(null);
  this.MAX_GAMES = maxGames;
  console.log("Pang server initialized");

  var server = this;

  this.checkQue = setInterval(function() {
    if(Object.keys(server.playerQue).length > 0) {

      if(Object.keys(server.playerQue).length > 1) {
        var player1 = server.playerQue[Object.keys(server.playerQue)[0]];
        var player2 = server.playerQue[Object.keys(server.playerQue)[1]];

        server.startGame(player1, player2);

        delete server.playerQue[Object.keys(server.playerQue)[0]];
        delete server.playerQue[Object.keys(server.playerQue)[0]];
      }
    } 
  }, 2000);
}

// Start a new game
Server.prototype.startGame = function (player1, player2) {
  console.log("Starting a new game");
  var server = this;
  var newGame = new Game("Game "+(parseInt(Object.keys(server.games).length)+1));

  var newPlayerSocket = server.playerQue[Object.keys(server.playerQue)[0]];
  newGame.join(player1);
  newGame.join(player2);
  
  player1.emit('connection_status', { connected: true, side: player1.side });
  player2.emit('connection_status', { connected: true, side: player2.side });

  this.games[newGame.id] = newGame;
}

// Enque a player
Server.prototype.enque = function(player) {
  var server = this;
  
  server.playerQue[player.id] = player;

  player.emit('connection_status', { connected: false, error: "Waiting for players, you are in que." });

  console.log("queing, current amount in que: "+Object.keys(server.playerQue).length);
}

// Remove from que
Server.prototype.deque = function(player) {

}

// Remove player that leaves
Server.prototype.leave = function(player) {
  var server = this;
  
  delete server.playerQue[player.id];
  for(game in server.games) {
    var thegame = server.games[game];
    if(thegame.players[player.id] !== undefined) {
      var oldSide = thegame.players[player.id].side;

      thegame.broadcast("player_left", thegame.players[player.id].side);
      thegame.leave(player);

      if(Object.keys(server.playerQue).length > 0) {
        var player = server.playerQue[Object.keys(server.playerQue)[0]];
        server.games[game].join(player);
        player.emit('connection_status', { connected: true, side: oldSide });
        delete server.playerQue[Object.keys(server.playerQue)[0]];
      } else {
        for(var aplayer in thegame.players) {
          var oldPlayer = thegame.players[aplayer];

          thegame.broadcast("que");

          thegame.leave(oldPlayer.socket);
          server.playerQue[oldPlayer.socket.id] = oldPlayer.socket;
          oldPlayer.socket.emit('connection_status', { connected: false, error: "Waiting for players, you are in que." });
        }
      }
    }
  }
}

// Add a player to game
Server.prototype.addToGame = function(game, player) {

}

// Remove from game
Server.prototype.removeFromGame = function(game, player) {

}

module.exports = Server;