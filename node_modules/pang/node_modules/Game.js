

var Player = require('./Player.js'),
    MAX_PLAYERS = 2;

var Ball = require('./Ball.js');

function Game (id) {
  this.id = id;
  this.players = Object.create(null);
  this.gameStarted = false;
  this.ball = Object.create(null);

  this.playerQue = Object.create(null);
}

Game.prototype.join = function (socket) {
  var player = new Player(socket, this);
  if (!this.players[socket.id]) {
    this.players[socket.id] = player;
  }

  this.playerEvents(player);
  this.broadcast("player_joined");
};

// Game.prototype.startQue = function () {
//   var checkQue = setInterval(function() {
//     if(Object.keys(that.playerQue).length > 0) {
//       console.log(Object.keys(that.playerQue));
//       if(!that.isFull()) {
//         var newPlayerSocket = that.playerQue.shift();
//         that.join(newPlayerSocket);
//         newPlayerSocket.emit('connection_status', { connected: true });
//       }
//     } else {
//       console.log("buu");
//       clearTimeout(checkQue);
//     }
//   }, 2000);
// }

// Game.prototype.enque = function (socket) {
//   console.log("queing someone");
//   var that = this;
  
//   if(Object.keys(that.playerQue).length < 1) {
//     that.playerQue[socket.id] = socket;
//     var checkQue = setInterval(function() {
//       if(Object.keys(that.playerQue).length > 0) {
//         if(!that.isFull()) {
//           var newPlayerSocket = that.playerQue[Object.keys(that.playerQue)[0]];
//           that.join(newPlayerSocket);
//           delete that.playerQue[Object.keys(that.playerQue)[0]];
//           newPlayerSocket.emit('connection_status', { connected: true });
//         }
//       } else {
//         clearTimeout(checkQue);
//       }
//     }, 2000);
//   } else {
//     that.playerQue[socket.id] = socket;
//   }
  
// }

Game.prototype.leave = function (socket) {
  delete this.players[socket.id];
  delete this.playerQue[socket.id];
};

Game.prototype.broadcast = function (event, data, socket) {
  var that = this;
  Object.keys(this.players).forEach(function (key) {
    var player = that.players[key];
    // If socket is specified, don't broadcast to this socket.
    if (socket && key === socket.id) {
      return;
    }
    player.socket.emit(event, data);
  });
};

Game.prototype.playerCount = function () {
  return Object.keys(this.players).length;
};

Game.prototype.isFull = function () {
  return this.playerCount() == MAX_PLAYERS;
};

Game.prototype.isAllPlayersReady = function () {
  var that = this;
  return Object.keys(this.players).every(function (key) {
    return that.players[key].ready;
  });
};

Game.prototype.playerEvents = function (player) {
  var that = this;
  player.socket.on('ready', function () {
    if(that.isAllPlayersReady() && !that.gameStarted) {
      that.start();
    }
  });
};

Game.prototype.start = function () {
  var that = this;
  this.gameStarted = true;
  this.ball = new Ball(this);
  this.ball.start();
  Object.keys(this.players).forEach(function (key) {
    var player = that.players[key];
    player.move();
  });
}


module.exports = Game;
